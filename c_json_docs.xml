<docs>
	<enum name="CJ_Variable_Type">
		<description>
			Contains the variable types used by the library. Note that INT and FLOAT are seperate types and COUNT is not a type. You can get the type of a variable as follows.
			<code>
				CJ_Variable *var; uint64_t type = var->type;
			</code>
			This also works for any type of variable with a known type like CJ_String, CJ_Integer etc.
		</description>
	</enum>
	<function type="void" name="cj_init">
		<description>
			Does setup for the other functions of the library to be called. This function needs to be called before any other function from the library.
			The oposite function <ref type="function" name="cj_terminate">cj_terminate</ref> should be called at the end of the program for cleanup.
		</description>
	</function>
	<function type="void" name="cj_terminate">
		<description>
			Cleans the memory of the library. Should be called at the end of the program to cleanup the memory.
		</description>
	</function>

	<struct name="CJ_Variable">
		<members>
			<li type="uint64_t" name="type">Represents the type of the variable. Should always be one of the values of <ref type="enum" name="CJ_Variable_Type">CJ_Variable_Type</ref>.</li>
			<li type="uint64_t" name="value">Represents the data of the variable. This value should never be accessed directly, instead use the functions cj_&lt;type&gt;_get and cj_&lt;type&gt;_set. </li>
		</members>
		<description>
			CJ_Variable is the generic struct of the library. You can think of it as the base class of the other types like CJ_String, CJ_Integer etc.
			The type of the variable should never change along it's lifetime. If you want to change a specific variable in an object or array, you need to detach the old variable and attach the new variable.
		</description>
	</struct>
	
	<function type="CJ_Variable *" name="cj_variable_copy">
		<parameters>
			<li type="CJ_Variable *" name="var">The variable to be copied.</li>
		</parameters>
		<return_value>
			The copy of the variable.
		</return_value>
		<description>
			Makes a copy of the variable along with all of it's children if any exist. Any of the variable types can be passed to this function. Passing NULL to this function will result in a segmentation fault.
		</description>
	</function>

	<function type="uint64_t" name="cj_variable_type">
		<parameters>
			<li type="CJ_Variable *" name="var">The variable to get the type from.</li>
		</parameters>
		<return_value>
			The type of the variable which should always be one of the values of <ref type="enum" name="CJ_Variable_Type">CJ_Variable_Type</ref>.
		</return_value>
		<description>
			Returns the type of the variable. Same as accessing the variable type directly from the <ref type="struct" name="CJ_Variable">CJ_Variable</ref> struct.
		</description>
	</function>

	<function type="void" name="cj_variable_destroy">
		<parameters>
			<li type="CJ_Variable *" name="var">The variable to destroy.</li>
		</parameters>
		<description>
			Destroys or frees the memory of the specified variable along with all of it's children if any exist.
		</description>
	</function>
</docs>
